{"version":3,"sources":["components/EmployeeCard/index.js","components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeCard","props","className","name","position","email","SearchFunction","htmlFor","type","id","onChange","event","filterBoxText","target","value","searchFilter","employees","key","App","state","stateEmployees","sortType","searchValue","sortedEmployees","filter","employee","includes","setState","Search","this","onClick","console","log","sortList","reverse","sort","compareOne","compareTwo","localeCompare","alphaSort","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uUAuBeA,MApBf,SAAsBC,GACpB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAME,MAEhC,4BACE,6CADF,IAC8BF,EAAMG,UAEpC,4BACE,0CADF,IAC2BH,EAAMI,W,YCI5BC,MAbf,SAAwBL,GACtB,OACE,yBAAKC,UAAU,uBACb,8BACE,2BAAOK,QAAQ,UAAf,UAAsC,6BACtC,2BAAOC,KAAK,OAAOC,GAAG,SAASN,KAAK,SAASO,SAAU,SAACC,GACtD,IAAIC,EAAgBD,EAAME,OAAOC,MACnCb,EAAMc,aAAaH,SCgCvBI,EAvCoB,CACtB,CACEb,KAAM,MACNC,SAAU,SACVC,MAAO,cACPY,IAAK,GAEP,CACEd,KAAM,OACNC,SAAU,UACVC,MAAO,eACPY,IAAK,GAEP,CACEd,KAAM,MACNC,SAAU,SACVC,MAAO,cACPY,IAAK,GAEP,CACEd,KAAM,QACNC,SAAU,mBACVC,MAAO,gBACPY,IAAK,GAEP,CACEd,KAAM,UACNC,SAAU,iBACVC,MAAO,kBACPY,IAAK,GAEP,CACEd,KAAM,OACNC,SAAU,eACVC,MAAO,eACPY,IAAK,IA2EMC,E,4MAtDbC,MAAQ,CACNC,eAAgBJ,EAChBK,SAAU,Y,EAIZN,aAAe,SAACO,GACd,IAAIC,EAAkBP,EAAUQ,QAAO,SAACC,GAAD,OACrCA,EAAStB,KAAKuB,SAASJ,MAEzB,EAAKK,SAAS,CACZP,eAAgBG,K,uDAIV,IAAD,OACP,OACE,yBAAKrB,UAAU,OACb,6BACE,kBAAC0B,EAAD,CAAQb,aAAcc,KAAKd,eAC3B,4BACEP,KAAK,SACLsB,QAAS,WACPC,QAAQC,IAtCJ,SAACC,EAAUZ,GAG3B,OAAQA,GACN,IAAK,OACH,OAAOY,EAASC,UAElB,QACE,OAAOD,EAASE,MAAK,SAACC,EAAYC,GAAb,OACnBD,EAAWjC,KAAKmC,cAAcD,EAAWlC,UA8BjCoC,CAAU,EAAKpB,MAAMC,eAAgB,EAAKD,MAAME,WAEtB,SAAxB,EAAKF,MAAME,SACb,EAAKM,SAAS,CACZN,SAAU,OAGZ,EAAKM,SAAS,CACZN,SAAU,WAZlB,mBAoBF,yBAAKZ,GAAG,cACLoB,KAAKV,MAAMC,eAAeoB,KAAI,SAACf,GAAD,OAC7B,kBAAC,EAAD,CACER,IAAKQ,EAASR,IACdd,KAAMsB,EAAStB,KACfC,SAAUqB,EAASrB,SACnBC,MAAOoB,EAASpB,iB,GA/CZoC,aCjDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.7f0018af.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n          <li>\n            <strong>Position:</strong> {props.position}\n          </li>\n          <li>\n            <strong>Email:</strong> {props.email}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeCard;\n","import React from 'react';\nimport \"./style.css\";\n//COMPONENT A search bar that can be used to build a modified list to be displayed.\n//This can be static on the page. Example didn't have a Search button. \n//Feel we may want to look into one for ourselves.\n\nfunction SearchFunction(props) {\n  return (\n    <div className=\"searchDiv searchBox\">\n      <form>\n        <label htmlFor=\"filter\">Filter</label><br/>\n        <input type=\"text\" id=\"filter\" name=\"filter\" onChange={(event) => {\n          let filterBoxText = event.target.value;\n        props.searchFilter(filterBoxText)}}/>\n      </form>\n    </div>\n  );\n}\n\nexport default SearchFunction;","import React, { Component } from \"react\";\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport \"./App.css\";\nimport Search from \"./components/Search/Search.js\";\n\n// const searchBar = SearchFunction();\nconst employeesOrigin = [\n  {\n    name: \"Bob\",\n    position: \"Bobber\",\n    email: \"Bob@Bob.Ber\",\n    key: 1,\n  },\n  {\n    name: \"Bill\",\n    position: \"Billing\",\n    email: \"Bill@Bob.Ber\",\n    key: 2,\n  },\n  {\n    name: \"Ben\",\n    position: \"Bender\",\n    email: \"Ben@Bob.Ber\",\n    key: 3,\n  },\n  {\n    name: \"Bjorn\",\n    position: \"Bjorn Identifier\",\n    email: \"Bjorn@Bob.Ber\",\n    key: 4,\n  },\n  {\n    name: \"Jakoval\",\n    position: \"Jakoval Trader\",\n    email: \"Jakoval@Bob.Ber\",\n    key: 5,\n  },\n  {\n    name: \"Adam\",\n    position: \"Adam Smasher\",\n    email: \"Adam@Bob.Ber\",\n    key: 6,\n  },\n];\n\nlet employees = employeesOrigin;\n\nconst alphaSort = (sortList, sortType) => {\n  //This is a switch primarily to allow for future variations on the search function. Right now, it's just checking if it needs to invert the name search or not. Since the only way to reach a 'down' state here is via the default sort option, the 'down' case just inverts the existing list.\n  //Probably going to refactor this to merge the qualifying if and this switch eventually.\n  switch (sortType) {\n    case \"down\":\n      return sortList.reverse();\n\n    default:\n      return sortList.sort((compareOne, compareTwo) =>\n        compareOne.name.localeCompare(compareTwo.name)\n      );\n  }\n};\n\nclass App extends Component {\n  state = {\n    stateEmployees: employees,\n    sortType: \"unsorted\",\n  };\n\n  //This is our filtering function. It could be compressed to a single line, if/when needed. It takes a searchValue, then filters our root employees list to entries that include it in the name key.\n  searchFilter = (searchValue) => {\n    let sortedEmployees = employees.filter((employee) =>\n      employee.name.includes(searchValue)\n    );\n    this.setState({\n      stateEmployees: sortedEmployees,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <Search searchFilter={this.searchFilter} />\n          <button\n            type=\"button\"\n            onClick={() => {\n              console.log(\n                alphaSort(this.state.stateEmployees, this.state.sortType)\n              );\n              if (this.state.sortType === \"down\") {\n                this.setState({\n                  sortType: \"up\",\n                });\n              } else {\n                this.setState({\n                  sortType: \"down\",\n                });\n              }\n            }}\n          >\n            Name Alphasort\n          </button>\n        </div>\n        <div id=\"resultList\">\n          {this.state.stateEmployees.map((employee) => (\n            <EmployeeCard\n              key={employee.key}\n              name={employee.name}\n              position={employee.position}\n              email={employee.email}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\n/*/\nWe want the following:\n\nAn array of employees, with (possibly) several categories of details.\n An element that can be used to build the display of this list on the page.\n \n COMPONENT A search bar that can be used to build a modified list to be displayed.\n This will call filter on a change in the search box.\n  This can be static on the page. Example didn't have a Search button. \n   Feel we may want to look into one for ourselves.\n\n\nCOMPONENT A filter that will remove filtered employees from the full list object, and return the reduced list object.\nThis will take filter by restrictions (trimmed) from the search bar on the main page. If this results in an empty string, just skip the filter step.\nThe full list will be stored here for the moment. May break it out to another component if needed, like if we want to add/delete.\nThis will be called by the main page, and will then call the rendering loop, and return the results of that render, for printing on the main page.\n\nCOMPONENT A for/for each loop to place one of these elements for each employee given.\nThis will take a prop object of the employees desired, and build the display of these employees, returning the full build.\nThis will be called by the App for each array item it receives from the filter>search returns.\n/*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}